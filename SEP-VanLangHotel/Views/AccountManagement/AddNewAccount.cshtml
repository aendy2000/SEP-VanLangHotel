@model SEP_VanLangHotel.Models.Tai_Khoan

@{
    ViewBag.Title = "THÊM TÀI KHOẢN MỚI";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@if (Convert.ToBoolean(Session["checkUserName"]) == true)
{
    <body onload="kiemtrataikhoantrung()">
    </body>
    <script>
        function kiemtrataikhoantrung() {
            cuteAlert({
                type: "error",
                title: "Tài khoản đã tồn tại!",
                message: "Tên tài khoản đã được đăng ký, vui lòng thử lại tên tài khoản khác!",
                buttonText: "Xác nhận"
            })
        }
    </script>
    Session["checkUserName"] = null;
    Session["checkPhone"] = null;
    Session["checkEmail"] = null;
    Session["checkCMNDCCCD"] = null;
}
else
{
    if (Convert.ToBoolean(Session["checkPhone"]) == true)
    {
        <body onload="kiemtraPhone()">
        </body>
        <script>
            function kiemtraPhone() {
                cuteAlert({
                    type: "error",
                    title: "Số điện thoại đã tồn tại!",
                    message: "Số điện thoại đã được đăng ký trên tài khoản khác, vui lòng thử lại số điện thoại khác",
                    buttonText: "Xác nhận"
                })
            }
        </script>
        Session["checkUserName"] = null;
        Session["checkPhone"] = null;
        Session["checkEmail"] = null;
        Session["checkCMNDCCCD"] = null;
    }
    else
    {
        if (Convert.ToBoolean(Session["checkEmail"]) == true)
        {
            <body onload="kiemtraEmail()">
            </body>
            <script>
                function kiemtraEmail() {
                    cuteAlert({
                        type: "error",
                        title: "Email đã tồn tại!",
                        message: "Email đã được đăng ký trên tài khoản khác, vui lòng thử lại một Email khác!",
                        buttonText: "Xác nhận"
                    })
                }
            </script>
            Session["checkUserName"] = null;
            Session["checkPhone"] = null;
            Session["checkEmail"] = null;
            Session["checkCMNDCCCD"] = null;
        }
        else
        {
            if (Convert.ToBoolean(Session["checkCMNDCCCD"]) == true)
            {
                <body onload="kiemtraCMNDCCCD()">
                </body>
                <script>
                    function kiemtraCMNDCCCD() {
                        cuteAlert({
                            type: "error",
                            title: "Số CMND/CCCD đã tồn tại!",
                            message: "Số CMND/CCCD đã được đăng ký trên tài khoản khác, vui lòng không tạo nhiều tài khoản cho một người!!",
                            buttonText: "Xác nhận"
                        })
                    }
                </script>
                Session["checkUserName"] = null;
                Session["checkPhone"] = null;
                Session["checkEmail"] = null;
                Session["checkCMNDCCCD"] = null;
            }

        }
    }

}
@if (!Session["error-import-file"].Equals("empthy"))
{
    <body onload="kiemtrafileimport()">
    </body>
    <script>
        let info = @Html.Raw(Json.Encode(Session["error-import-file"]));
        function kiemtrafileimport() {
            cuteAlert({
                type: "error",
                title: "Thông báo!",
                message: info,
                buttonText: "Xác nhận"
            })
        }
    </script>
    Session["error-import-file"] = "empthy";
}
else if (!Session["thongbaoSuccess"].Equals("empthy"))
{
    <body onload="kiemtrafileimport()">
    </body>
    <script>
    let info = @Html.Raw(Json.Encode(Session["thongbaoSuccess"]));
    function kiemtrafileimport()
    {
        cuteAlert({
            type: "Success",
            title: "Thông báo!",
            message: info,
            buttonText: "Xác nhận"
        })
    }
    </script>
    Session["thongbaoSuccess"] = "empthy";
}

<title>@ViewBag.Title</title>
<div class="panel-header bg-primary-gradient">
    <div class="page-inner py-5">
        <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row">
            <div>
                <h2 style="text-shadow: black 0.1em 0.1em 0.2em" class="text-white pb-2 fw-bold">@ViewBag.Title</h2>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("AddNewAccount", "AccountManagement", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="page-inner mt--5">
        <div class="row">
            <div class="col-xl-4">
                <!-- Profile picture card-->
                <div class="card mb-4 mb-xl-0">
                    <div class="card-header"><b>Ảnh hồ sơ</b></div>
                    <div class="card-body text-center">
                        <!-- Profile picture image-->
                        <img class="img-account-profile rounded-circle mb-2" src="https://firebasestorage.googleapis.com/v0/b/sep-project-2022-6fbfd.appspot.com/o/images%2FDefaultAvatar.png?alt=media&token=c1099848-26b6-4ddb-8cce-209ec415fe7a" id="previewImage">
                        <!-- Profile picture help block-->
                        <div class="small font-italic text-muted mb-2"> Chọn hình đại diện - ảnh vuông, dưới 5MB</div>
                        <input role="button" class="btn btn-primary" type="file" name="file" accept="image/*" onchange="ShowImageUpload(this, document.getElementById('previewImage'))" />
                    </div>
                </div>
            </div>
            <div class="col-xl-8">
                <div class="card mb-4">
                    <div class="card-header"><b>Thông tin tài khoản</b></div>
                    <div class="card-body" style="margin-top: -1.8rem">

                        <div class="mb-3">
                            <label class="small mb-1">Họ tên</label>
                            @Html.EditorFor(model => model.Ho_Va_Ten, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = "Nguyễn Văn A...", pattern = "[aAàÀảẢãÃáÁạẠăĂằẰẳẲẵẴắẮặẶâÂầẦẩẨẫẪấẤậẬbBcCdDđĐeEèÈẻẺẽẼéÉẹẸêÊềỀểỂễỄếẾệỆfFgGhHiIìÌỉỈĩĨíÍịỊjJkKlLmMnNoOòÒỏỎõÕóÓọỌôÔồỒổỔỗỖốỐộỘơƠờỜởỞỡỠớỚợỢpPqQrRsStTuUùÙủỦũŨúÚụỤưƯừỪửỬữỮứỨựỰvVwWxXyYỳỲỷỶỹỸýÝỵỴzZ ]{1,30}", @oninvalid = "this.setCustomValidity('Hãy nhập đầy đủ họ và tên')", @oninput = "this.setCustomValidity('')" } })
                            @Html.ValidationMessageFor(model => model.Ho_Va_Ten, "", new { @class = "text-danger" })
                        </div>
                        <div class="row gx-3 mb-3">
                            <div class="col-md-6">
                                <label class="small mb-1" for="inputOrgName">Giới tính</label>
                                @Html.DropDownList("gioiTinh", (IEnumerable<SelectListItem>)ViewBag.Gioi_Tinh, null, new { @class = "form-control", @placeholder = "Họ và tên", @required = "required", @oninvalid = "this.setCustomValidity('Hãy chọn giới tính')", @oninput = "this.setCustomValidity('')" })
                            </div>
                            <div class="col-md-6">
                                <label class="small mb-1" for="inputLocation">Ngày sinh</label>
                                @Html.EditorFor(model => model.Sinh_Nhat, new { htmlAttributes = new { @class = "form-control", @type = "date", @placeholder = "Ngày/Tháng/Năm", @required = "required", @oninvalid = "this.setCustomValidity('ngày sinh không được bỏ trống')", @oninput = "this.setCustomValidity('')" } })
                                @Html.ValidationMessageFor(model => model.Sinh_Nhat, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row gx-3 mb-3">
                            <div class="col-md-6">
                                <label class="small mb-1" for="inputOrgName">CMND/CCCD</label>
                                @Html.EditorFor(model => model.CMND_CCCD, new { htmlAttributes = new { @class = "form-control", @placeholder = "Số CMND/CCCD", @required = "required", @pattern = "[0-9]{9,12}", @oninvalid = "this.setCustomValidity('Hãy nhập vào đúng số CMND/CCCD của tài khoản')", @oninput = "this.setCustomValidity('')" } })
                                @Html.ValidationMessageFor(model => model.CMND_CCCD, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6">
                                <label class="small mb-1" for="inputLocation">Số điện thoại</label>
                                @Html.EditorFor(model => model.SDT, new { htmlAttributes = new { @class = "form-control", @placeholder = "Số điện thoại di động", @pattern = "[0-9]{10}", @required = "required", @oninvalid = "this.setCustomValidity('Hãy nhập vào đúng số điện thoại của tài khoản')", @oninput = "this.setCustomValidity('')" } })
                                @Html.ValidationMessageFor(model => model.SDT, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="small mb-1" for="inputEmailAddress">Địa chỉ Email</label>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email", @placeholder = "Địa chỉ Email", @required = "required", @oninvalid = "this.setCustomValidity('Hãy nhập vào địa chỉ Email của tài khoản')", @oninput = "this.setCustomValidity('')" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label class="small mb-1" for="inputEmailAddress">Địa chỉ nhà</label>
                            @Html.EditorFor(model => model.Dia_Chi, new { type = "textarea", htmlAttributes = new { @class = "form-control", placeholder = "Địa chỉ nhà", @rows = "5", @maxlength = "200", @oninvalid = "this.setCustomValidity('Hãy nhập vào địa chỉ với tối đa 200 ký tự')", @oninput = "this.setCustomValidity('')" } })
                            @Html.ValidationMessageFor(model => model.Dia_Chi, "", new { @class = "text-danger" })
                        </div>
                        <div class="row gx-3 mb-3">
                            <div class="col-md-6">
                                <label class="small mb-1" for="inputOrgName">Tên đăng nhập</label>
                                @Html.EditorFor(model => model.Ten_Dang_Nhap, new { htmlAttributes = new { @class = "form-control", @placeholder = "Tên đăng nhập của tài khoản", @pattern = "[a-zA-Z0-9]{1,30}", @required = "required", @oninvalid = "this.setCustomValidity('Hãy nhập đúng tên đăng nhập với độ dài trong khoảng 30 ký tự')", @oninput = "this.setCustomValidity('')" } })
                                @Html.ValidationMessageFor(model => model.Ten_Dang_Nhap, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6">
                                <label class="small mb-1" for="inputLocation">Mật khẩu</label>
                                @Html.EditorFor(model => model.Mat_Khau, new { htmlAttributes = new { @class = "form-control", @placeholder = "Mật khẩu đăng nhập của tài khoản", @type = "password", @pattern = ".{3,30}", @required = "required", @oninvalid = "this.setCustomValidity('Hãy nhập vào mật khẩu với độ dài 3 - 30 ký tự')", @oninput = "this.setCustomValidity('')" } })
                                @Html.ValidationMessageFor(model => model.Mat_Khau, "", new { @class = "text-danger" })
                                <p style="color:red;" id="passw"></p>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="small mb-1" for="inputEmailAddress">Quyền</label>
                            @Html.DropDownListFor(model => model.Ma_Quyen, null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Ma_Quyen, "", new { @class = "text-danger" })
                        </div>
                        <br />
                        <hr />
                        <div style="text-align: center; margin-top: 1.8rem" class="mb-3">
                            <button style="width: 180px; color: white;" type="submit" class="btn btn-search" onclick="if (!confirm('Thêm tài khoản?')) { return false }">
                                Thêm
                            </button>
                            &emsp;
                            <a style="width:180px; color:white;" role="button" class="btn btn-danger" onclick="huythemtaikhoan()">
                                Hủy
                            </a>
                        </div>
                        <br />
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@*xác nhận hủy thêm tk*@
<script>
    function huythemtaikhoan() {
       cuteAlert({
           type: "question",
           title: "Hủy bỏ?",
           message: "Bạn có chắc chắn muốn hủy thêm tài khoản?",
           confirmText: "Xác nhận", cancelText: "không hủy"
       }).then(function (isConfirm) {
           if (isConfirm) {
               window.location.href = '@Url.Action("Home", "AccountManagement")';
           } else {
               return false;
           }
       });
   }
</script>

<link rel="stylesheet" href="~/assets/css/profiles.css">
